# -*- Mode: POLY-ORG; encoding: utf-8; tab-width: 2;  -*- ---
#+Title: The WooCommerce plugin for Sakura widget.
#+PROPERTY: header-args :results silent
#+OPTIONS: tex:t toc:2 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+PROPERTY: header-args :results silent :noweb yes :tangle ./src/sakura.php
#+STARTUP: latexpreview
#+STARTUP: noindent
#+STARTUP: inlineimages
#+PROPERTY: header-args
#+PROPERTY: literate-lang php
#+PROPERTY: literate-load yes
* Table of Contents                                            :TOC:noexport:
- [[#references][References]]
- [[#preparation][preparation]]
  - [[#header][header]]
  - [[#prevent-data-leaks][Prevent Data Leaks]]
  - [[#check-if-woocommerce-is-active][Check if WooCommerce is active]]
  - [[#a-class-for-this-plugin][a class for this plugin]]
- [[#implementation-of-main-class][Implementation of main class]]
  - [[#version-and-construct-of-main-class][version and construct of main class]]
  - [[#constructor-of-main-class][constructor of main class]]
  - [[#init-main-class][init main class]]
  - [[#init-hooks][init hooks]]
  - [[#setup-widget][setup widget]]
  - [[#singletone-of-main-class][singletone of Main class]]
  - [[#initialization][initialization]]
- [[#load-the-instance-of-main-class][Load the instance of main class]]
- [[#a-widget-for-sakura-network][A Widget for Sakura network]]
  - [[#definition][definition]]
  - [[#implementation][implementation]]
    - [[#construct][construct]]
    - [[#widget][widget]]
    - [[#form][form]]
    - [[#update][update]]
  - [[#load-widget][load widget]]
- [[#readme][readme]]

* References
- Document: [[https://docs.woocommerce.com/document/create-a-plugin/][create a plugin]]
- The target php file: [[file:src/sakura.php]]

* preparation
** header
#+BEGIN_SRC php
<?php
/**
 * Plugin Name: Sakura Network in WooCommerce
 * Plugin URI: https://sakura.eco
 * Description: An eCommerce toolkit that helps you show articles in a sakura.eco network.
 * Version: 1.0.0
 * Author: Sakura.eco
 * Author URI: https://sakura.eco/
 * Developer: Sakura.eco
 * Developer URI: https://sakura.eco/
 * Text Domain: sakura
 * Domain Path: /languages
 *
 * Woo: 12345:342928dfsfhsf8429842374wdf4234sfd
 * WC requires at least: 2.2
 * WC tested up to: 2.3
 *
 * Requires at least: 5.3
 * Requires PHP: 7.0
 *
 * @package SakuraEco
 */
#+END_SRC
** Prevent Data Leaks
https://docs.woocommerce.com/document/create-a-plugin/#section-7

Try to prevent direct access data leaks. Add this line of code after the opening PHP tag in each PHP file:
#+BEGIN_SRC php
if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly
}
#+END_SRC
** Check if WooCommerce is active
#+BEGIN_SRC php
/**
 * Check if WooCommerce is active
 **/
if (! ( in_array( 'woocommerce/woocommerce.php', apply_filters( 'active_plugins', get_option( 'active_plugins' ) ) ) )) {
    exit;
}
#+END_SRC
** a class for this plugin
#+BEGIN_SRC php
/**
 * Main Sakura Class.
 *
 * @class Sakura
 */
final class Sakura {

  <<woocommerce-plugin-version>>
  <<woocommerce-construct>>
  <<sakura-singleton>>
  <<init-hooks>>
  <<setup-widget>>
  <<init-main-class>>
}
#+END_SRC

* Implementation of main class
:PROPERTIES:
:header-args: :noweb yes :tangle no
:END:
** version and construct of main class
#+name: woocommerce-plugin-version
#+BEGIN_SRC php
	/**
	 * Sakura version.
	 *
	 * @var string
	 */
	public $version = '1.0.2';

#+END_SRC
** constructor of main class
#+name: woocommerce-construct
#+BEGIN_SRC php
	/**
	 * Sakura Constructor.
	 */
	public function __construct() {
		$this->init_hooks();
	}

#+END_SRC
** init main class
#+name: init-main-class
#+BEGIN_SRC php
	/**
	 * Init Sakura when WooCommerce Initialises.
	 */
	public function init() {
	}
#+END_SRC

** init hooks
In frontend, the action =woocommerce_before_main_content= will be used both in shop products list page and single product content page.
#+name: init-hooks
#+BEGIN_SRC php
	/**
	 * Hook into actions and filters.
	 *
	 * @since 2.3
	 */
	private function init_hooks() {
      add_action('wp_head', array( $this, 'setup_widget'));
	}
#+END_SRC
** setup widget
#+name: setup-widget
#+BEGIN_SRC php
	/**
	 * Setup widget.
	 */
	public function setup_widget() {
	}

#+END_SRC

** singletone of Main class
#+name: sakura-singleton
#+BEGIN_SRC php :tangle no

	/**
	 * The single instance of the class.
	 *
	 * @var Sakura
	 * @since 1.0
	 */
	protected static $_instance = null;

	/**
	 * Main Sakura Instance.
	 *
	 * Ensures only one instance of Sakura is loaded or can be loaded.
	 *
	 * @since 2.1
	 * @static
	 * @see SK()
	 * @return Sakura - Main instance.
	 */
	public static function instance() {
		if ( is_null( self::$_instance ) ) {
			self::$_instance = new self();
		}
		return self::$_instance;
	}

#+END_SRC

** initialization
We can run our initialization codes in action [[https://github.com/woocommerce/woocommerce/blob/4.9.2/includes/class-woocommerce.php#L592][woocommerce_init]], which will be called after plugins loaded.

* Load the instance of main class
#+BEGIN_SRC php
/**
 ,* Returns the main instance of SC.
 ,*
 ,* @since  1.0
 ,* @return Sakura
 ,*/
function SC() { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid
	return Sakura::instance();
}
// Global for backwards compatibility.
$GLOBALS['sakura'] = SC();
#+END_SRC
* A Widget for Sakura network
[[https://www.wpbeginner.com/wp-tutorials/how-to-create-a-custom-wordpress-widget/][How to Create a Custom WordPress Widget]]
** definition
#+BEGIN_SRC php
class Sakura_widget extends WP_Widget {
  <<sakura-widget>>
  // Class sakura_widget ends here
}
#+END_SRC
** implementation
:PROPERTIES:
:header-args: :tangle no :noweb-ref sakura-widget
:END:
*** construct
This is the part where we create the widget ID, title, and description.
#+BEGIN_SRC php :noweb-ref sakura-widget
// Creating the widget
function __construct() {
    parent::__construct(

        // Base ID of your widget
        'Sakura_widget',

        // Widget name will appear in UI
        __('Sakura Network', 'sakura_widget_domain'),

        // Widget description
        array( 'description' => __('A Widget for your Sakura network', 'sakura_widget_domain' ), )
    );
  }
#+END_SRC
*** widget
This is where we define the output generated by the widget.
#+BEGIN_SRC php
	    // Creating widget front-end
public function widget( $args, $instance ) {
    if ( isset( $instance[ 'title' ] ) ) {
        $title = $instance['title'];
    } else {
        $title = __('Sakura Network', 'wpb_widget_domain');
    }
    $url = apply_filters( 'widget_url', $instance['url'] );

    // before and after widget arguments are defined by themes
    echo $args['before_widget'];
    if ( ! empty( $title ) )
        echo $args['before_title'] . $title . $args['after_title'];

    // This is where you run the code and display the output
    ?>
    <iframe width="450" height="433" src="<?php echo $url; ?>" title="Sakura Transparency Widget"></iframe>
<?php
    echo $args['after_widget'];
}

#+END_SRC
*** form
This part of the code is where we create the form with widget options for backend.
#+BEGIN_SRC php
    // Widget Backend
    public function form( $instance ) {
        if ( isset( $instance[ 'title' ] ) ) {
            $title = $instance['title'];
        } else {
            $title = __('Sakura Network', 'wpb_widget_domain' );
        }
        $url = ! empty( $instance['url'] ) ? $instance['url'] : esc_html__( 'Please input the widget URL', 'text_domain' );
        // Widget admin form
        ?>
        <p>
        <label for="<?php echo $this->get_field_id( 'url' ); ?>"><?php _e( 'Url:' ); ?></label>
        <input class="widefat" id="<?php echo $this->get_field_id( 'url' ); ?>"
        name="<?php echo $this->get_field_name( 'url' ); ?>" type="text" value="<?php echo esc_attr( $url ); ?>" />
        </p>
<?php
    }
#+END_SRC
*** update
This is the part where we save widget options in the database.
#+BEGIN_SRC php
    // Updating widget replacing old instances with new
    public function update( $new_instance, $old_instance ) {
        $instance = array();
        $instance['url'] = ( ! empty( $new_instance['url'] ) ) ? strip_tags( $new_instance['url'] ) : '';
        $instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';
        return $instance;
    }

#+END_SRC
** load widget
#+BEGIN_SRC php
// Register and load the widget
function sakura_load_widget() {
    register_widget( 'Sakura_widget' );
}
add_action( 'widgets_init', 'sakura_load_widget' );
#+END_SRC

* TODO readme
#+BEGIN_SRC txt :tangle no
=== Sakura ===
Contributors: Sakura.eco
Tags: widget
Requires at least: 4.0.1
Tested up to: 5.6
Requires PHP: 7.0
Stable tag: 1.0
#+END_SRC
