# -*- Mode: POLY-ORG; encoding: utf-8; tab-width: 2;  -*- ---
#+Title: The WooCommerce plugin for Sakura widget.
#+PROPERTY: header-args :results silent
#+OPTIONS: tex:t toc:2 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+PROPERTY: header-args :results silent :noweb yes :tangle ./src/sakura.php
#+STARTUP: latexpreview
#+STARTUP: noindent
#+STARTUP: inlineimages
#+PROPERTY: header-args
#+PROPERTY: literate-lang php
#+PROPERTY: literate-load yes
* Table of Contents                                            :TOC:noexport:
- [[#references][References]]
- [[#preparation][preparation]]
  - [[#header][header]]
  - [[#prevent-data-leaks][Prevent Data Leaks]]
  - [[#check-if-woocommerce-is-active][Check if WooCommerce is active]]
- [[#implementation-of-main-class][Implementation of main class]]
  - [[#class-definition][class definition]]
  - [[#version-and-construct-of-main-class][version and construct of main class]]
  - [[#constructor-of-main-class][constructor of main class]]
  - [[#init-hooks][init hooks]]
  - [[#init-main-class][init main class]]
  - [[#store-source-sitearticle-into-a-local-cookie][store source site/article into a local cookie]]
  - [[#fetch-source-sitearticle-in-local-cookies][fetch source site/article in local cookies]]
  - [[#store-sitearticle-from-sakura-network-in-local-cookies02][store site/article from Sakura network in local cookies.]]
  - [[#handle-various-events][handle various events]]
    - [[#a-class-property-to-hold-the-current-action-name][a class property to hold the current action name.]]
    - [[#a-classes-property-to-hold-the-current-action-params][a classes property to hold the current action params]]
    - [[#a-function-to-enqueue-current-action-information][a function to enqueue current action information]]
    - [[#a-function-to-handle-the-delayed-action-queue][a function to handle the delayed action queue.]]
    - [[#new-order][new order]]
    - [[#add_to_cart][add_to_cart]]
    - [[#payment-complete][payment complete]]
  - [[#enqueue-js-files][enqueue js files]]
  - [[#singletone-of-main-class][singletone of Main class]]
- [[#load-the-instance-of-main-class][Load the instance of main class]]
- [[#a-widget-for-sakura-network][A Widget for Sakura network]]
  - [[#definition][definition]]
  - [[#construct][construct]]
  - [[#widget][widget]]
  - [[#form][form]]
  - [[#update][update]]
  - [[#load-widget][load widget]]
- [[#sakura-network-setttings-page][Sakura Network Setttings page]]
  - [[#a-class-for-this-page][a class for this page]]
  - [[#a-value-to-hold-the-options][a value to hold the options]]
  - [[#contruct-to-add-hooks][contruct to add hooks]]
  - [[#add-menu-for-setting-page][add menu for setting page]]
  - [[#add-setting-page][add setting page]]
  - [[#initialize-page][initialize page]]
  - [[#sanitize_callback][sanitize_callback]]
  - [[#section-info][section info]]
  - [[#callback-for-widget-key][callback for widget key]]
  - [[#create-setting-page-if-admin][create setting page if admin]]
  - [[#how-to-retrive-setting-value][how to retrive setting value]]
- [[#javascript-codes][Javascript codes]]
  - [[#resize-sakura-widgets-height-to-fit-with-content][resize sakura widget's height to fit with content]]
- [[#plugin-for-sakura-development-environment][Plugin for Sakura development environment]]
  - [[#headers-for-this-plugin][headers for this plugin]]
  - [[#disable-rejecting-unsafe-urls-by-a-wordpress-filter][disable rejecting unsafe urls by a wordpress filter]]
  - [[#return-sakura-server-address-from-a-local-file][return sakura server address from a local file.]]
  - [[#log-activities-from-our-plugin][log activities from our plugin]]
- [[#deploy-to-local-development-environment][Deploy to local development environment]]
- [[#readme][readme]]

* References
- Wordpress document: [[https://developer.wordpress.org/plugins/][Plugin Handbook]]
- WooCommerce document: [[https://docs.woocommerce.com/document/create-a-plugin/][create a plugin]]
- The target php file: [[file:src/sakura.php]]

* preparation
** header
#+BEGIN_SRC php
<?php
/**
 * Plugin Name: Sakura Network in WooCommerce
 * Plugin URI: https://www.sakura.eco
 * Description: An eCommerce toolkit that helps you show articles in a Sakura network.
 * Version: 1.0.0
 * Author: Sakura.eco
 * Author URI: https://www.sakura.eco/
 * Developer: Sakura.eco
 * Developer URI: https://www.sakura.eco/
 * Text Domain: sakura
 * Domain Path: /languages
 *
 * Woo: 12345:342928dfsfhsf8429842374wdf4234sfd
 * WC requires at least: 2.2
 * WC tested up to: 2.3
 *
 * Requires at least: 5.3
 * Requires PHP: 7.0
 *
 * @package SakuraEco
 */
#+END_SRC
** Prevent Data Leaks
https://docs.woocommerce.com/document/create-a-plugin/#section-7

Try to prevent direct access data leaks. Add this line of code after the opening PHP tag in each PHP file:
#+BEGIN_SRC php
if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly
}
#+END_SRC
** Check if WooCommerce is active
#+BEGIN_SRC php
/**
 * Check if WooCommerce is active
 **/
if (! ( in_array( 'woocommerce/woocommerce.php', apply_filters( 'active_plugins', get_option( 'active_plugins' ) ) ) )) {
    exit;
}
#+END_SRC
* Implementation of main class
:PROPERTIES:
:header-args: :noweb yes :tangle no :noweb-ref sakura-main-class
:END:
** class definition
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
/**
 * Main Sakura Class.
 *
 * @class Sakura
 */
final class Sakura {

  <<sakura-main-vars>>
  <<sakura-main-class>>
}

#+END_SRC

** version and construct of main class
#+BEGIN_SRC php
	/**
	 * Sakura version.
	 *
	 * @var string
	 */
	public $version = '1.0.2';

#+END_SRC
** constructor of main class
#+BEGIN_SRC php
	/**
	 * Sakura Constructor.
	 */
	public function __construct() {
		$this->init_hooks();
	}

#+END_SRC
** init hooks
# In frontend, the action =woocommerce_before_main_content= will be used both in shop products list page and single product content page.
You can check WooCommerce's [[https://woocommerce.github.io/code-reference/hooks/hooks.html][Action and Filter Hook Reference]] for a list of action and filter hooks.
Please note that we add out =init= to the end of =init= action, to ensure that WooCommerce' initialization will be processed firstly.
#+BEGIN_SRC php
	/**
	 * Hook into actions and filters.
	 *
	 * @since 2.3
	 */
	private function init_hooks() {
      add_action( 'init', array( $this, 'init' ), 999 );
      add_action( 'shutdown', array( $this, 'execute_delayed_queue' ), 0 );
      add_action('wp_enqueue_scripts', array( $this, 'enqueue_scripts'), 0);

      // a uniform interface to woocommerce events.
      add_action( 'woocommerce_new_order', function ($order_id) {
        return $this->enqueue_action('woocommerce_new_order', $order_id);
 }, 0 );
      // add_action( 'woocommerce_update_order', array( $this, 'update_order' ), 0 );
      // add_action( 'woocommerce_order_refunded', array( $this, 'refund_order' ), 0 );
      add_action( 'woocommerce_add_to_cart',
 function ($hash_id) {
 return $this->enqueue_action('woocommerce_add_to_cart', $hash_id);
 }, 0 );
      add_action( 'woocommerce_pre_payment_complete',
 function ($order_id) {
 return $this->enqueue_action('woocommerce_pre_payment_complete', $order_id);
 }, 0 );
	}
#+END_SRC
** init main class
#+BEGIN_SRC php
	/**
	 * Init Sakura when Wordpress Initialises.
	 */
	public function init() {
      // Classes/actions loaded for the frontend and for ajax requests.
    if (( ! is_admin() || defined( 'DOING_AJAX' ) ) && ! defined( 'DOING_CRON' )) {

        $this->store_sakura_history_in_cookie();
    }
	}

#+END_SRC

** store source site/article into a local cookie
#+BEGIN_SRC php
    /**
    * Store site/articles into a local cookie.
    */
    public function do_store_sakura_history_in_cookie($history) {
            $history_cookie_id = 0;
            do {
                $history_cookie_id++;
                $history_cookie_name = sprintf('sakura_history_%d', $history_cookie_id);
            } while (isset($_COOKIE[$history_cookie_name]));

            wc_setcookie($history_cookie_name, $history, time() + MONTH_IN_SECONDS);
            $_COOKIE[$history_cookie_name] = $history;
    }
#+END_SRC
** fetch source site/article in local cookies
#+BEGIN_SRC php
    /**
    * fetch site/articles in a local cookie.
    */
    public function sakura_history_in_cookie() {
        $history = NULL;
        foreach($_COOKIE as $key => $value) {
            if (strpos($key, 'sakura_history_', 0) === 0) {
                if (isset($history)) {
                    $history = $history . "," . $value;
                } else {
                    $history = $value;
                }
            }
        }
        return $history;
    }
#+END_SRC

** store site/article from Sakura network in local cookies.[0/2]
Please note that we have to [[https://stackoverflow.com/a/3230167][update cookie value]] directly so widget can access it correctly.

- [ ] store the time we added a sakura from article.
- [ ] store the expired time of each articl to one month.
#+BEGIN_SRC php
    /**
    * Store site/articles from sakura networks.
    */
    public function store_sakura_history_in_cookie() {
        if (isset($_GET["sakura_from"])) {
            $article = rawurlencode($_GET["sakura_from"]);
            $history = sprintf('%s', $article);
            if (isset($_GET["sakura_to"])) {
              $history = $history . "-" . rawurlencode($_GET["sakura_to"]);
            }
            $this->do_store_sakura_history_in_cookie ($history);
        }
    }
#+END_SRC

** handle various events
We will handle required WooCommerce events in action [[https://developer.wordpress.org/reference/hooks/shutdown/][shutdown]] so it will not block the render of a WooCommerce page.
*** a class property to hold the current action name.
#+BEGIN_SRC php :noweb-ref sakura-main-vars
   public $current_action = null;
#+END_SRC
*** a classes property to hold the current action params
#+BEGIN_SRC php :noweb-ref sakura-main-vars
   public $current_action_params = null;
#+END_SRC
*** a function to enqueue current action information
#+BEGIN_SRC php
    /**
    * enqueue action
    */
    public function enqueue_action($action, $arg) {
            $this->current_action = $action;
            $this->current_action_params = $arg;
    }
#+END_SRC
*** a function to handle the delayed action queue.
The idea is from the web hooks mechanism of WooCommerce.
#+BEGIN_SRC php
    /**
    * Process action
    */
    public function execute_delayed_queue() {
          switch ($this->current_action)
    {
                    case 'woocommerce_new_order':
        $this->new_order($this->current_action_params);
      break;
    case 'woocommerce_add_to_cart':
        $this->add_to_cart($this->current_action_params);
    break;
    case 'woocommerce_pre_payment_complete':
        $this->payment_complete = $this->current_action_params;
        break;
    }
                         }

#+END_SRC

*** new order
http://hookr.io/actions/woocommerce_new_order/
Please note that we use sku as the unique id in the sakura side.
#+BEGIN_SRC php
    /**
    * New order
    */
    public function new_order($order_id) {
        do_action('sakura_record_activity', sprintf('new order: #%d', $order_id));
        $history = $this->sakura_history_in_cookie();
        if (isset($history)) {
                $order = wc_get_order($order_id);
                $sakura_network_options = get_option('sakura_network_option'); // Array of All Options
                $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key
                do_action('sakura_record_activity', sprintf('notify sakura for new order: #%d', $order_id));
                foreach ($order->get_items() as $item_id => $item) {
                    $product    = $item->get_product();
                    $payload = array(
                        'event' => 'purchase',
                        'product-id' => $item->get_variation_id() ? $item->get_variation_id() : $item->get_product_id(),
                        'sakura-widget-key' => $sakura_widget_key,
                        'sku' => $product->get_sku(),
                        'amount' => $item->get_quantity(),
                        'id' => $order_id,
                    );
                    $payload['history'] = $history;

                    $http_args = array(
                        'method'      => 'POST',
                        'timeout'     => MINUTE_IN_SECONDS,
                        'redirection' => 0,
                        'httpversion' => '1.0',
                        'blocking'    => true,
                        'user-agent'  => sprintf('WooCommerce Hookshot (WordPress/%s)', $GLOBALS['wp_version']),
                        'body'        => trim(wp_json_encode($payload)),
                        'headers'     => array(
                            'Content-Type' => 'application/json',
                        ),
                        'cookies'     => array(),
                    );
                    // Add custom headers.
                    $http_args['headers']['X-WC-Webhook-Source']      = home_url('/'); // Since 2.6.0.

                    $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
                    $response = wp_safe_remote_request(sprintf('%s/api/widget/event', $sakura_server), $http_args);
                    do_action('sakura_record_activity', $response);
                };
            }
    }
#+END_SRC
*** add_to_cart
#+BEGIN_SRC php
    /**
    * add to cart
    */
    public function add_to_cart($arg ) {
        do_action('sakura_record_activity', sprintf('notify sakura for add to cart: #%s', $arg));
    }
#+END_SRC
*** payment complete
#+BEGIN_SRC php
    /**
    * payment complete
    */
        public function payment_complete($order_id)
        {
            do_action('sakura_record_activity', sprintf('notify sakura for payment complete: #%d', $order_id));
        }

#+END_SRC

** enqueue js files
Please note that we put =sakura.js= to end of the body, so it can apply resizer to iframes in the body.
#+BEGIN_SRC php
    /**
    * enqueue js files.
    */
    public function enqueue_scripts() {
        wp_enqueue_script( 'iframeResizer', plugins_url( '/js/iframeResizer.min.js', __FILE__ ));
        wp_enqueue_script( 'sakura', plugins_url( '/js/sakura.js', __FILE__), array(), false, true);
    }
#+END_SRC

** singletone of Main class
#+BEGIN_SRC php :tangle no

	/**
	 * The single instance of the class.
	 *
	 * @var Sakura
	 * @since 1.0
	 */
	protected static $_instance = null;

	/**
	 * Main Sakura Instance.
	 *
	 * Ensures only one instance of Sakura is loaded or can be loaded.
	 *
	 * @since 2.1
	 * @static
	 * @see SC()
	 * @return Sakura - Main instance.
	 */
	public static function instance() {
		if ( is_null( self::$_instance ) ) {
			self::$_instance = new self();
		}
		return self::$_instance;
	}

#+END_SRC

# ** initialization
# We can run our initialization codes in action [[https://github.com/woocommerce/woocommerce/blob/4.9.2/includes/class-woocommerce.php#L592][woocommerce_init]], which will be called after plugins loaded.

* Load the instance of main class
#+BEGIN_SRC php
/**
 * Returns the main instance of SC.
 *
 * @since  1.0
 * @return Sakura
 */
function SC() { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid
	return Sakura::instance();
}
// Global for backwards compatibility.
$GLOBALS['sakura'] = SC();
#+END_SRC
* A Widget for Sakura network
:PROPERTIES:
:header-args: :noweb yes :tangle no :noweb-ref sakura-widget
:END:
[[https://www.wpbeginner.com/wp-tutorials/how-to-create-a-custom-wordpress-widget/][How to Create a Custom WordPress Widget]]
** definition
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
class Sakura_widget extends WP_Widget {
  <<sakura-widget>>
  // Class sakura_widget ends here
}
#+END_SRC
** construct
This is the part where we create the widget ID, title, and description.
#+BEGIN_SRC php
// Creating the widget
function __construct() {
    parent::__construct(

        // Base ID of your widget
        'Sakura_widget',

        // Widget name will appear in UI
        __('Sakura Network', 'sakura_widget_domain'),

        // Widget description
        array( 'description' => __('A widget for your Sakura network', 'sakura_widget_domain' ), )
    );
  }
#+END_SRC
** widget
This is where we define the output generated by the widget.

We put the source articles in the local cookie to the URL when request widget from Sakura.eco.
It is an easy solution for now and we can update it later if the URL size is too large.
#+BEGIN_SRC php
// Creating widget front-end
public function widget( $args, $instance ) {
		global $post;
    if ( isset( $instance[ 'title' ] ) ) {

        $title = $instance['title'];
    } else {
        $title = __('Sakura Network', 'wpb_widget_domain');
    }

    $query_args = array();
    $sakura_network_options = get_option( 'sakura_network_option' ); // Array of All Options
    $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key

    $sakura_server = apply_filters('sakura_update_server_address', 'https://www.sakura.eco');
    $url = $sakura_server . '/widget/' . $sakura_widget_key;

    $history = SC()->sakura_history_in_cookie();
    if (isset($history)) {
        $query_args['history'] = $history;
    }
    $product = wc_get_product();
    if ($product) {
        $query_args['id'] = $product->get_id();
        $query_args['sku'] = $product->get_sku();
    }
    if (sizeof($query_args) > 0) {
        $url = $url . '?' . http_build_query($query_args);
    }

    // before and after widget arguments are defined by themes
    echo $args['before_widget'];
    if ( ! empty( $title ) )
        echo $args['before_title'] . $title . $args['after_title'];

    // This is where you run the code and display the output
    ?>
    <iframe class="sakura" style="width: 100%; height: 433px; border: 0" src="<?php echo $url; ?>" title="Sakura Transparency Widget"></iframe>
<?php
    echo $args['after_widget'];
}

#+END_SRC
** form
This part of the code is where we create the form with widget options for backend.

We can setup widget URL by wordpress's [[https://developer.wordpress.org/reference/functions/site_url/][site url]] automatically later.

#+BEGIN_SRC php
// Widget Backend
    public function form( $instance ) {
        if ( isset( $instance[ 'title' ] ) ) {
            $title = $instance['title'];
        } else {
            $title = __('Sakura Network', 'wpb_widget_domain' );
        }
        $url = ! empty( $instance['url'] ) ? $instance['url'] : esc_html__( 'Please input the widget URL', 'text_domain' );
        // Widget admin form


        ?>
        <p>
         Please setup this widget via <a href="/wp-admin/admin.php?page=sakura-network">Sakura Network menu</a>.
        </p>
<?php
    }
#+END_SRC
** update
This is the part where we save widget options in the database.
#+BEGIN_SRC php
// Updating widget replacing old instances with new
    public function update( $new_instance, $old_instance ) {
        $instance = array();
        $instance['url'] = ( ! empty( $new_instance['url'] ) ) ? strip_tags( $new_instance['url'] ) : '';
        $instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';
        return $instance;
    }

#+END_SRC
** load widget
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
// Register and load the widget
function sakura_load_widget() {
    register_widget( 'Sakura_widget' );
}
add_action( 'widgets_init', 'sakura_load_widget' );
#+END_SRC
* Sakura Network Setttings page
:PROPERTIES:
:header-args: :noweb yes :noweb-ref sakura-network-functions :tangle no
:END:
We need a admin page to set up company id and widget key in wordpress.
It will shown in wordpress dashboard page.
** a class for this page
Generated by the WordPress Option Page generator at http://jeremyhixon.com/wp-tools/option-page/
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
class SakuraNetwork {
  <<sakura-network-vars>>
  <<sakura-network-functions>>
}
#+END_SRC
** a value to hold the options
#+BEGIN_SRC php :noweb-ref sakura-network-vars
	private $sakura_network_options;
#+END_SRC
** contruct to add hooks
#+BEGIN_SRC php
	public function __construct() {
		add_action( 'admin_menu', array( $this, 'sakura_network_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'sakura_network_page_init' ) );
	}
#+END_SRC
** add menu for setting page
#+BEGIN_SRC php
	public function sakura_network_add_plugin_page() {
		add_menu_page(
			'Sakura Network', // page_title
			'Sakura Network', // menu_title
			'manage_options', // capability
			'sakura-network', // menu_slug
			array( $this, 'sakura_network_create_admin_page' ), // function
			'dashicons-admin-settings', // icon_url
			2 // position
		);
	}
#+END_SRC
** add setting page
#+BEGIN_SRC php
	public function sakura_network_create_admin_page() {
		$this->sakura_network_options = get_option( 'sakura_network_option' ); ?>

		<div class="wrap">
			<h2>Sakura Network</h2>
			<p>Sakura Network Options</p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'sakura_network_option_group' );
					do_settings_sections( 'sakura-network-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }
#+END_SRC
** initialize page
#+BEGIN_SRC php
	public function sakura_network_page_init() {
		register_setting(
			'sakura_network_option_group', // option_group
			'sakura_network_option', // option_name
			array( $this, 'sakura_network_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'sakura_network_setting_section', // id
			'Settings', // title
			array( $this, 'sakura_network_section_info' ), // callback
			'sakura-network-admin' // page
		);

		add_settings_field(
			'sakura_widget_key', // id
			'Sakura Widget key', // title
			array( $this, 'sakura_widget_key_callback' ), // callback
			'sakura-network-admin', // page
			'sakura_network_setting_section' // section
		);
	}
#+END_SRC
** sanitize_callback
#+BEGIN_SRC php
	public function sakura_network_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['sakura_company_id'] ) ) {
			$sanitary_values['sakura_company_id'] = sanitize_text_field( $input['sakura_company_id'] );
		}

		if ( isset( $input['sakura_widget_key'] ) ) {
			$sanitary_values['sakura_widget_key'] = sanitize_text_field( $input['sakura_widget_key'] );
		}

		return $sanitary_values;
	}
#+END_SRC
** section info
#+BEGIN_SRC php
	public function sakura_network_section_info() {

	}
#+END_SRC
** callback for widget key
#+BEGIN_SRC php
	public function sakura_widget_key_callback() {
		printf(
			'<input class="regular-text" type="text" name="sakura_network_option[sakura_widget_key]" id="sakura_widget_key" value="%s">',
			isset( $this->sakura_network_options['sakura_widget_key'] ) ? esc_attr( $this->sakura_network_options['sakura_widget_key']) : ''
		);
	}

#+END_SRC
** create setting page if admin
#+BEGIN_SRC php :tangle ./src/sakura.php :noweb-ref ""
if ( is_admin() )
	$sakura_network = new SakuraNetwork();
#+END_SRC
** how to retrive setting value
#+BEGIN_SRC php :tangle no :noweb-ref ""
/*
 * Retrieve this value with:
 * $sakura_network_options = get_option( 'sakura_network_option' ); // Array of All Options
 * $sakura_widget_key = $sakura_network_options['sakura_widget_key']; // Sakura Widget key
 */
#+END_SRC

* Javascript codes
:PROPERTIES:
:header-args: :results silent :noweb yes :tangle ./src/js/sakura.js
:END:
** resize sakura widget's height to fit with content
#+BEGIN_SRC js
 iFrameResize({
     log                     : false,                  // Disable console logging
     maxHeight: 400,
     resizedCallback         : function(messageData){ // Callback fn when resize is received
	 // console.log(
	 //     '<b>Frame ID:</b> '    + messageData.iframe.id +
	 //     ' <b>Height:</b> '     + messageData.height +
	 //     ' <b>Width:</b> '      + messageData.width +
	 //     ' <b>Event type:</b> ' + messageData.type
	 // );
     },
     messageCallback         : function(messageData){ // Callback fn when message is received
	 // console.log(
	 //     '<b>Frame ID:</b> '    + messageData.iframe.id +
	 //     ' <b>Message:</b> '    + messageData.message
	 // );
	 // alert(messageData.message);
     },
     closedCallback         : function(id){ // Callback fn when iFrame is closed
	 // console.log(
	 //     '<b>IFrame (</b>'    + id +
	 //     '<b>) removed from page.</b>'
	 // );
     }
 }, '.sakura');
#+END_SRC

* Plugin for Sakura development environment
:PROPERTIES:
:header-args: :tangle ./sakura_dev.php
:END:
In development environment, we need some additional setup, this is done by an additional wordpress plugin,
which added some filters to change the behavior of the official sakura plugin.
It should not be included in official environment.
** headers for this plugin
#+BEGIN_SRC php
<?php
/**
 * @package The development plugin for Sakura Network.
 * @version 1.0.0
 */
/*
Plugin Name: Sakura network internal development
Plugin URI: https://www.sakura.eco/
Description: This is just a plugin for development use only, to make us local development easy.
Author: Sakura.eco
Version: 1.0.0
Author URI: https://www.sakura.eco/
*/
#+END_SRC

** disable rejecting unsafe urls by a wordpress filter
This idea comes from [[https://dev.to/manuelmolina97/handling-multiple-environments-in-raw-php-3788][this link]].
As our local development use a http request or a self signed https cert, we have to disable the rejecting of unsafe urls.
Otherwise =wp_safe_remote_request= will fail.
#+BEGIN_SRC php
    add_filter( 'http_request_args', function ( $args ) {

        $args['reject_unsafe_urls'] = false;

        return $args;
    }, 999 );
#+END_SRC
** return sakura server address from a local file.
It is very convenient for our development and test environment before release to product environment.
#+BEGIN_SRC php
// Ensure get_home_path() is declared.
require_once ABSPATH . 'wp-admin/includes/file.php';

function read_sakura_server_for_dev ($arg) {
  return trim(file_get_contents( get_home_path() . 'sakura_address.txt'));
}
add_filter( 'sakura_update_server_address', 'read_sakura_server_for_dev', 999 );
#+END_SRC
** log activities from our plugin
We can also take use of [[https://querymonitor.com/docs/logging-variables/][Query Monitor]] to log messages.
#+BEGIN_SRC php
function log_sakura_plugin_activity ($message) {
    do_action( 'qm/notice', $message );
    if (is_string($message)) {
        error_log($message);
    } else if ($message instanceof WP_Error) {
        error_log(sprintf('WP_Error:#%s', json_encode($message->get_error_messages())));
    } else {
        error_log(json_encode($message));
    }
}
add_action( 'sakura_record_activity', 'log_sakura_plugin_activity');
#+END_SRC

* Deploy to local development environment
You can copy it to local wordpress plugin directory.

For example:
#+BEGIN_SRC sh :tangle no
for shop in shop1 shop2
do
		wp=/data/sakura/shops/$shop/html/wp-content/plugins
		echo setup sakura in $wp
		sudo mkdir -p $wp/sakura
		sudo mkdir -p $wp/sakura_dev
    echo 'http://172.17.0.1' | sudo tee $wp/../../sakura_address.txt
		echo cp to $wp/sakura_dev/
		sudo cp sakura_dev.php $wp/sakura_dev/
		sudo cp -fr src/* $wp/sakura/
done
#+END_SRC
Then you can active them in your wordpress admin page.

* TODO readme
#+BEGIN_SRC txt :tangle no
=== Sakura ===
Contributors: Sakura.eco
Tags: widget
Requires at least: 4.0.1
Tested up to: 5.6
Requires PHP: 7.0
Stable tag: 1.0
#+END_SRC
