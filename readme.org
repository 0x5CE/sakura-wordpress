# -*- Mode: POLY-ORG; encoding: utf-8; tab-width: 2;  -*- ---
#+Title: The WooCommerce plugin for Sakura widget.
#+PROPERTY: header-args :results silent
#+OPTIONS: tex:t toc:2 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+PROPERTY: header-args :results silent :noweb yes :tangle ./src/sakura.php
#+STARTUP: latexpreview
#+STARTUP: noindent
#+STARTUP: inlineimages
#+PROPERTY: header-args
#+PROPERTY: literate-lang php
#+PROPERTY: literate-load yes
* Table of Contents                                            :TOC:noexport:
- [[#references][References]]
- [[#preparation][preparation]]
  - [[#header][header]]
  - [[#prevent-data-leaks][Prevent Data Leaks]]
  - [[#check-if-woocommerce-is-active][Check if WooCommerce is active]]
  - [[#a-class-for-this-plugin][a class for this plugin]]
- [[#implementation-of-main-class][Implementation of main class]]
  - [[#version-and-construct-of-main-class][version and construct of main class]]
  - [[#constructor-of-main-class][constructor of main class]]
  - [[#init-hooks][init hooks]]
  - [[#init-main-class][init main class]]
  - [[#store-sitearticle-from-sakura-network-in-local-cookies02][store site/article from Sakura network in local cookies.]]
  - [[#handle-various-events][handle various events]]
    - [[#a-class-property-to-hold-the-current-action-name][a class property to hold the current action name.]]
    - [[#a-classes-property-to-hold-the-current-action-params][a classes property to hold the current action params]]
    - [[#a-function-to-enqueue-current-action-information][a function to enqueue current action information]]
    - [[#a-function-to-handle-the-delayed-action-queue][a function to handle the delayed action queue.]]
    - [[#new-order][new order]]
    - [[#add_to_cart][add_to_cart]]
    - [[#payment-complete][payment complete]]
  - [[#singletone-of-main-class][singletone of Main class]]
- [[#load-the-instance-of-main-class][Load the instance of main class]]
- [[#a-widget-for-sakura-network][A Widget for Sakura network]]
  - [[#definition][definition]]
  - [[#implementation][implementation]]
    - [[#construct][construct]]
    - [[#widget][widget]]
    - [[#form][form]]
    - [[#update][update]]
  - [[#load-widget][load widget]]
- [[#plugin-for-sakura-development-environment][Plugin for Sakura development environment]]
  - [[#headers-for-this-plugin][headers for this plugin]]
  - [[#disable-rejecting-unsafe-urls-by-a-wordpress-filter][disable rejecting unsafe urls by a wordpress filter]]
  - [[#return-sakura-server-address-from-a-local-file][return sakura server address from a local file.]]
  - [[#log-activities-from-our-plugin][log activities from our plugin]]
- [[#readme][readme]]

* References
- Wordpress document: [[https://developer.wordpress.org/plugins/][Plugin Handbook]]
- WooCommerce document: [[https://docs.woocommerce.com/document/create-a-plugin/][create a plugin]]
- The target php file: [[file:src/sakura.php]]

* preparation
** header
#+BEGIN_SRC php
<?php
/**
 * Plugin Name: Sakura Network in WooCommerce
 * Plugin URI: https://sakura.eco
 * Description: An eCommerce toolkit that helps you show articles in a Sakura network.
 * Version: 1.0.0
 * Author: Sakura.eco
 * Author URI: https://sakura.eco/
 * Developer: Sakura.eco
 * Developer URI: https://sakura.eco/
 * Text Domain: sakura
 * Domain Path: /languages
 *
 * Woo: 12345:342928dfsfhsf8429842374wdf4234sfd
 * WC requires at least: 2.2
 * WC tested up to: 2.3
 *
 * Requires at least: 5.3
 * Requires PHP: 7.0
 *
 * @package SakuraEco
 */
#+END_SRC
** Prevent Data Leaks
https://docs.woocommerce.com/document/create-a-plugin/#section-7

Try to prevent direct access data leaks. Add this line of code after the opening PHP tag in each PHP file:
#+BEGIN_SRC php
if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly
}
#+END_SRC
** Check if WooCommerce is active
#+BEGIN_SRC php
/**
 * Check if WooCommerce is active
 **/
if (! ( in_array( 'woocommerce/woocommerce.php', apply_filters( 'active_plugins', get_option( 'active_plugins' ) ) ) )) {
    exit;
}
#+END_SRC
** a class for this plugin
#+BEGIN_SRC php
/**
 * Main Sakura Class.
 *
 * @class Sakura
 */
final class Sakura {

  <<sakura-main-vars>>
  <<sakura-main-class>>
}
#+END_SRC
* Implementation of main class
:PROPERTIES:
:header-args: :tangle no :noweb-ref sakura-main-class
:END:
** version and construct of main class
#+BEGIN_SRC php
	/**
	 * Sakura version.
	 *
	 * @var string
	 */
	public $version = '1.0.2';

#+END_SRC
** constructor of main class
#+BEGIN_SRC php
	/**
	 * Sakura Constructor.
	 */
	public function __construct() {
		$this->init_hooks();
	}

#+END_SRC
** init hooks
# In frontend, the action =woocommerce_before_main_content= will be used both in shop products list page and single product content page.
You can check WooCommerce's [[https://woocommerce.github.io/code-reference/hooks/hooks.html][Action and Filter Hook Reference]] for a list of action and filter hooks.
Please note that we add out =init= to the end of =init= action, to ensure that WooCommerce' initialization will be processed firstly.
#+BEGIN_SRC php
	/**
	 * Hook into actions and filters.
	 *
	 * @since 2.3
	 */
	private function init_hooks() {
      add_action( 'init', array( $this, 'init' ), 999 );
      add_action( 'shutdown', array( $this, 'execute_delayed_queue' ), 0 );

      // a uniform interface to woocommerce events.
      add_action( 'woocommerce_new_order', function ($order_id) {
        return $this->enqueue_action('woocommerce_new_order', $order_id);
 }, 0 );
      // add_action( 'woocommerce_update_order', array( $this, 'update_order' ), 0 );
      // add_action( 'woocommerce_order_refunded', array( $this, 'refund_order' ), 0 );
      add_action( 'woocommerce_add_to_cart',
 function ($hash_id) {
 return $this->enqueue_action('woocommerce_add_to_cart', $hash_id);
 }, 0 );
      add_action( 'woocommerce_pre_payment_complete',
 function ($order_id) {
 return $this->enqueue_action('woocommerce_pre_payment_complete', $order_id);
 }, 0 );
	}
#+END_SRC
** init main class
#+BEGIN_SRC php
	/**
	 * Init Sakura when Wordpress Initialises.
	 */
	public function init() {
      // Classes/actions loaded for the frontend and for ajax requests.
    if (( ! is_admin() || defined( 'DOING_AJAX' ) ) && ! defined( 'DOING_CRON' )) {

        $this->store_sakura_history_in_cookie();
    }
	}

#+END_SRC

** store site/article from Sakura network in local cookies.[0/2]
Please note that we have to [[https://stackoverflow.com/a/3230167][update cookie value]] directly so widget can access it correctly.

- [ ] store the time we added a sakura from article.
- [ ] store the expired time of each articl to one month.
#+BEGIN_SRC php
    /**
    * Store site/articles from sakura networks.
    */
    public function store_sakura_history_in_cookie() {
        if (isset($_GET["sakura_from"])) {
            $article = rawurlencode($_GET["sakura_from"]);

            if (isset( $_COOKIE["sakura_history"] )) {
                $history = $_COOKIE["sakura_history"] . "," . $article;
            } else {
                $history = sprintf('%s', $article);
            }

            $product = wc_get_product();
            if ($product) {
              $history = $history . ":" . ($product->get_id()) . "," . ($product->get_sku());
            }
            wc_setcookie("sakura_history", $history, time() + MONTH_IN_SECONDS);
            $_COOKIE["sakura_history"] = $history;
        }
    }
#+END_SRC

** handle various events
We will handle required WooCommerce events in action [[https://developer.wordpress.org/reference/hooks/shutdown/][shutdown]] so it will not block the render of a WooCommerce page.
*** a class property to hold the current action name.
#+BEGIN_SRC php :noweb-ref sakura-main-vars
   public $current_action = null;
#+END_SRC
*** a classes property to hold the current action params
#+BEGIN_SRC php :noweb-ref sakura-main-vars
   public $current_action_params = null;
#+END_SRC
*** a function to enqueue current action information
#+BEGIN_SRC php
    /**
    * enqueue action
    */
    public function enqueue_action($action, $arg) {
            $this->current_action = $action;
            $this->current_action_params = $arg;
    }
#+END_SRC
*** a function to handle the delayed action queue.
The idea is from the web hooks mechanism of WooCommerce.
#+BEGIN_SRC php
    /**
    * Process action
    */
    public function execute_delayed_queue() {
          switch ($this->current_action)
    {
                    case 'woocommerce_new_order':
        $this->new_order($this->current_action_params);
      break;
    case 'woocommerce_add_to_cart':
        $this->add_to_cart($this->current_action_params);
    break;
    case 'woocommerce_pre_payment_complete':
        $this->payment_complete = $this->current_action_params;
        break;
    }
                         }

#+END_SRC

*** new order
http://hookr.io/actions/woocommerce_new_order/
#+BEGIN_SRC php
    /**
    * New order
    */
    public function new_order($order_id) {
				$order = wc_get_order( $order_id );

        do_action('sakura_record_activity', sprintf('notify sakura for new order: #%d', $order_id));
        foreach ( $order->get_items() as $item_id => $item ) {
            $product    = $item->get_product();
            $payload = array(
                        'event' => 'purchase',
                        'to_article' => $item->get_variation_id() ? $item->get_variation_id() : $item->get_product_id(),
                        'amount' => $item->get_quantity(),
                        'id' => $order_id,
                                        );

            $http_args = array(
            'method'      => 'POST',
            'timeout'     => MINUTE_IN_SECONDS,
            'redirection' => 0,
            'httpversion' => '1.0',
            'blocking'    => true,
            'user-agent'  => sprintf( 'WooCommerce Hookshot (WordPress/%s)', $GLOBALS['wp_version'] ),
            'body'        => trim( wp_json_encode( $payload ) ),
            'headers'     => array(
                'Content-Type' => 'application/json',
            ),
            'cookies'     => array(),
            );
            // Add custom headers.
            $http_args['headers']['X-WC-Webhook-Source']      = home_url( '/' ); // Since 2.6.0.

            $sakura_server = apply_filters('sakura_update_server_address', 'https://sakura.eco');
            $response = wp_safe_remote_request(sprintf('%s/api/widget/event', $sakura_server), $http_args );
                if($response instanceof WP_Error) {
                    do_action('sakura_record_activity', sprintf('failed send new cart event:#%s', json_encode($response->get_error_messages())));
                } else {
                    do_action('sakura_record_activity', sprintf('send new cart event with response:#%s', json_encode($response)));
                }
            };
    }
#+END_SRC
*** add_to_cart
#+BEGIN_SRC php
    /**
    * add to cart
    */
    public function add_to_cart($arg ) {
        do_action('sakura_record_activity', sprintf('notify sakura for add to cart: #%s', $arg));
    }
#+END_SRC
*** payment complete
#+BEGIN_SRC php
    /**
    * payment complete
    */
        public function payment_complete($order_id)
        {
            do_action('sakura_record_activity', sprintf('notify sakura for payment complete: #%d', $order_id));
        }

#+END_SRC

** singletone of Main class
#+BEGIN_SRC php :tangle no

	/**
	 * The single instance of the class.
	 *
	 * @var Sakura
	 * @since 1.0
	 */
	protected static $_instance = null;

	/**
	 * Main Sakura Instance.
	 *
	 * Ensures only one instance of Sakura is loaded or can be loaded.
	 *
	 * @since 2.1
	 * @static
	 * @see SC()
	 * @return Sakura - Main instance.
	 */
	public static function instance() {
		if ( is_null( self::$_instance ) ) {
			self::$_instance = new self();
		}
		return self::$_instance;
	}

#+END_SRC

# ** initialization
# We can run our initialization codes in action [[https://github.com/woocommerce/woocommerce/blob/4.9.2/includes/class-woocommerce.php#L592][woocommerce_init]], which will be called after plugins loaded.

* Load the instance of main class
#+BEGIN_SRC php
/**
 * Returns the main instance of SC.
 *
 * @since  1.0
 * @return Sakura
 */
function SC() { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid
	return Sakura::instance();
}
// Global for backwards compatibility.
$GLOBALS['sakura'] = SC();
#+END_SRC
* A Widget for Sakura network
[[https://www.wpbeginner.com/wp-tutorials/how-to-create-a-custom-wordpress-widget/][How to Create a Custom WordPress Widget]]
** definition
#+BEGIN_SRC php
class Sakura_widget extends WP_Widget {
  <<sakura-widget>>
  // Class sakura_widget ends here
}
#+END_SRC
** implementation
:PROPERTIES:
:header-args: :tangle no :noweb-ref sakura-widget
:END:
*** construct
This is the part where we create the widget ID, title, and description.
#+BEGIN_SRC php :noweb-ref sakura-widget
// Creating the widget
function __construct() {
    parent::__construct(

        // Base ID of your widget
        'Sakura_widget',

        // Widget name will appear in UI
        __('Sakura Network', 'sakura_widget_domain'),

        // Widget description
        array( 'description' => __('A widget for your Sakura network', 'sakura_widget_domain' ), )
    );
  }
#+END_SRC
*** widget
This is where we define the output generated by the widget.

We put the source articles in the local cookie to the URL when request widget from Sakura.eco.
It is an easy solution for now and we can update it later if the URL size is too large.
#+BEGIN_SRC php
// Creating widget front-end
public function widget( $args, $instance ) {
		global $post;
    if ( isset( $instance[ 'title' ] ) ) {

        $title = $instance['title'];
    } else {
        $title = __('Sakura Network', 'wpb_widget_domain');
    }

    $query_args = array();

    $url = apply_filters( 'widget_url', $instance['url'] );
    if (isset( $_COOKIE["sakura_history"] )) {
        $query_args['history'] = $_COOKIE["sakura_history"];
    }
    $product = wc_get_product();
    if ($product) {
        $query_args['id'] = $product->get_id();
        $query_args['sku'] = $product->get_sku();
    }
    if (sizeof($query_args) > 0) {
        $url = $url . '?' . http_build_query($query_args);
    }

    // before and after widget arguments are defined by themes
    echo $args['before_widget'];
    if ( ! empty( $title ) )
        echo $args['before_title'] . $title . $args['after_title'];

    // This is where you run the code and display the output
    ?>
    <iframe class="sakura" width="450" height="433" src="<?php echo $url; ?>" title="Sakura Transparency Widget"></iframe>
<?php
    echo $args['after_widget'];
}

#+END_SRC
*** form
This part of the code is where we create the form with widget options for backend.

We can setup widget URL by wordpress's [[https://developer.wordpress.org/reference/functions/site_url/][site url]] automatically later.

#+BEGIN_SRC php
// Widget Backend
    public function form( $instance ) {
        if ( isset( $instance[ 'title' ] ) ) {
            $title = $instance['title'];
        } else {
            $title = __('Sakura Network', 'wpb_widget_domain' );
        }
        $url = ! empty( $instance['url'] ) ? $instance['url'] : esc_html__( 'Please input the widget URL', 'text_domain' );
        // Widget admin form


        ?>
        <p>
        <label for="<?php echo $this->get_field_id( 'url' ); ?>"><?php _e( 'Url:' ); ?></label>
        <input class="widefat" id="<?php echo $this->get_field_id( 'url' ); ?>"
        name="<?php echo $this->get_field_name( 'url' ); ?>" type="text" value="<?php echo esc_attr( $url ); ?>" />
        </p>
<?php
    }
#+END_SRC
*** update
This is the part where we save widget options in the database.
#+BEGIN_SRC php
// Updating widget replacing old instances with new
    public function update( $new_instance, $old_instance ) {
        $instance = array();
        $instance['url'] = ( ! empty( $new_instance['url'] ) ) ? strip_tags( $new_instance['url'] ) : '';
        $instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';
        return $instance;
    }

#+END_SRC
** load widget
#+BEGIN_SRC php
// Register and load the widget
function sakura_load_widget() {
    register_widget( 'Sakura_widget' );
}
add_action( 'widgets_init', 'sakura_load_widget' );
#+END_SRC
* Plugin for Sakura development environment
:PROPERTIES:
:header-args: :tangle ./sakura_dev.php
:END:
In development environment, we need some additional setup, this is done by an additional wordpress plugin,
which added some filters to change the behavior of the official sakura plugin.
It should not be included in official environment.
** headers for this plugin
#+BEGIN_SRC php
<?php
/**
 * @package The development plugin for Sakura Network.
 * @version 1.0.0
 */
/*
Plugin Name: Sakura network internal development
Plugin URI: https://sakura.eco/
Description: This is just a plugin for development use only, to make us local development easy.
Author: Sakura.eco
Version: 1.0.0
Author URI: https://sakura.eco/
*/
#+END_SRC

** disable rejecting unsafe urls by a wordpress filter
This idea comes from [[https://dev.to/manuelmolina97/handling-multiple-environments-in-raw-php-3788][this link]].
As our local development use a http request or a self signed https cert, we have to disable the rejecting of unsafe urls.
Otherwise =wp_safe_remote_request= will fail.
#+BEGIN_SRC php
    add_filter( 'http_request_args', function ( $args ) {

        $args['reject_unsafe_urls'] = false;

        return $args;
    }, 999 );
#+END_SRC
** return sakura server address from a local file.
It is very convenient for our development and test environment before release to product environment.
#+BEGIN_SRC php
// Ensure get_home_path() is declared.
require_once ABSPATH . 'wp-admin/includes/file.php';

function read_sakura_server_for_dev ($arg) {
  return trim(file_get_contents( get_home_path() . 'sakura_address.txt'));
}
add_filter( 'sakura_update_server_address', 'read_sakura_server_for_dev', 999 );
#+END_SRC
** log activities from our plugin
#+BEGIN_SRC php
function log_sakura_plugin_activity ($message) {
    error_log($message);
}
add_action( 'sakura_record_activity', 'log_sakura_plugin_activity');
#+END_SRC

* TODO readme
#+BEGIN_SRC txt :tangle no
=== Sakura ===
Contributors: Sakura.eco
Tags: widget
Requires at least: 4.0.1
Tested up to: 5.6
Requires PHP: 7.0
Stable tag: 1.0
#+END_SRC
